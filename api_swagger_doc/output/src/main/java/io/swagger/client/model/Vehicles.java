/*
 * Studio Ghibli API
 * # Studio Ghibli API   The Studio Ghibli API catalogs the people, places, and things found in the worlds of Ghibli. It was created to help users discover resources, consume them via HTTP requests, and interact with them in whatever way makes sense. Navigation can be found on the left sidebar, and the right sidebar shows examples of returned objects for successful calls.    Users can raise an issue, ask for help, or find a contribution guide at the main repo: [https://github.com/janaipakos/ghibliapi](https://github.com/janaipakos/ghibliapi)  # Getting Started   Requests can be made with `curl` or other helper libraries by following regular REST calls. For example, here is how to GET the resource for the film *My Neighbor Tororo*:    `curl https://ghibliapi.herokuapp.com/films/58611129-2dbc-4a81-a72f-77ddfc1b1b49`    Calling this resource will respond with the following object:    ```json   {   \"id\": \"58611129-2dbc-4a81-a72f-77ddfc1b1b49\",   \"title\": \"My Neighbor Totoro\",   \"original_title\": \"となりのトトロ\",   \"original_title_romanised\": \"Tonari no Totoro\",   \"description\": \"Two sisters move to the country with their father in order to be closer to their hospitalized mother, and discover the surrounding trees are inhabited by Totoros, magical spirits of the forest. When the youngest runs away from home, the older sister seeks help from the spirits to find her.\",   \"director\": \"Hayao Miyazaki\",   \"producer\": \"Hayao Miyazaki\",   \"release_date\": \"1988\",   \"running_time\": \"86\",   \"rt_score\": \"93\",   ...   }   ```  # Base URL   Users must prepend all resource calls with this base URL:    `https://ghibliapi.herokuapp.com`  # Authentication    There is no authentication necessary for the Studio Ghibli API.  # Workflow   Endpoints can be used by themselves, or combined with one another to retrieve more specific information. An example workflow is listed below:    ### Goal: Get a list of people with the species classification as \"spirit.\"     - Call the species endpoint with `/species?name=spirit`     - Call the people listed under this endpoint with `/people/<uuid>`     - Combine these results   # Use Case   There are numerous ways for users to interact with the platform. For example, with the \"people\" API, users can get customized information about people, such as eye and hair color. Another example is using the \"species\"\" API to find the different films each creature appears in. A more concrete case study is listed below:    ### A use case for finding information on all the cats of Studio Ghibli.    Using the Aeson library in Haskell, the user can parse the `people` array to return all of the cats, listed under `/species/603428ba-8a86-4b0b-a9f1-65df6abef3d3`    ```haskell   import qualified Data.ByteString.Lazy as L   import GHC.Generics   import Data.Aeson    main = do       fileData <- L.readFile \"cats.json\"       let ghibliResponse = decode fileData :: Maybe GhibliCatResponse       let ghibliResults = people <$> ghibliResponse       findCat ghibliResults    findCat :: Maybe [GhibliCatResult] -> IO ()   findCat Nothing = print \"data not found\"   findCat (Just people) = do       print $ T.pack \"Studio Ghibli Cats:\"       forM_ people $ \\person -> do           let dataName = name person           let dataGender = gender person           let dataAge = age person           let dataHairColor = hairColor person           let dataEyeColor = eyeColor person           let dataFilms = films person           print $ T.concat [T.pack 'name: ', dataName                            ,T.pack ', gender: ', dataGender                            ,T.pack ', age: ', dataAge                            ,T.pack ', hair color: ', dataHairColor                            ,T.pack ', eye color: '', dataEyeColor                            ]   ```    The above code will return an IO Action of the requested cats.    ```   \"Studio Ghibli Cats:\"   \"name: Jiji, gender: Male, hair color: Black, eye color: Black\"   \"name: Catbus, gender: Male, hair color: Brown, eye color: Yellow\"   \"name: Niya, gender: Male, hair color: Beige, eye color: White\"   \"name: Renaldo Moon aka Moon aka Muta, gender: Male, hair color: Beige, eye color: White\"   \"name: Cat King, gender: Male, hair color: Grey, eye color: Emerald\"   \"name: Yuki, gender: Female, hair color: White, eye color: Blue\"   \"name: Haru, gender: Female, hair color: Brown, eye color: Brown\"   \"name: Baron Humbert von Gikkingen, gender: Male, hair color: Yellow, eye color: Green\"   \"name: Natori, gender: Male, hair color: Grey, eye color: Blue\"   ```  # Helper Libraries    ## Elixir   - [ghibli](https://github.com/sotojuan/ghibli) by [Juan Soto](https://github.com/sotojuan) 
 *
 * OpenAPI spec version: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Vehicles
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2021-05-03T11:35:21.292+02:00")
public class Vehicles {
  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("vehicle_class")
  private String vehicleClass = null;

  @SerializedName("length")
  private String length = null;

  @SerializedName("pilot")
  private String pilot = null;

  @SerializedName("films")
  private List<String> films = null;

  @SerializedName("url")
  private String url = null;

  public Vehicles id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier representing a specific vehicle
   * @return id
  **/
  @ApiModelProperty(value = "Unique identifier representing a specific vehicle")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Vehicles name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the vehicles
   * @return name
  **/
  @ApiModelProperty(value = "Name of the vehicles")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Vehicles description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of the vehicle
   * @return description
  **/
  @ApiModelProperty(value = "Description of the vehicle")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Vehicles vehicleClass(String vehicleClass) {
    this.vehicleClass = vehicleClass;
    return this;
  }

   /**
   * Class of the vehicle
   * @return vehicleClass
  **/
  @ApiModelProperty(value = "Class of the vehicle")
  public String getVehicleClass() {
    return vehicleClass;
  }

  public void setVehicleClass(String vehicleClass) {
    this.vehicleClass = vehicleClass;
  }

  public Vehicles length(String length) {
    this.length = length;
    return this;
  }

   /**
   * Length of the vehicle in feet
   * @return length
  **/
  @ApiModelProperty(value = "Length of the vehicle in feet")
  public String getLength() {
    return length;
  }

  public void setLength(String length) {
    this.length = length;
  }

  public Vehicles pilot(String pilot) {
    this.pilot = pilot;
    return this;
  }

   /**
   * Pilot of the vehicle
   * @return pilot
  **/
  @ApiModelProperty(value = "Pilot of the vehicle")
  public String getPilot() {
    return pilot;
  }

  public void setPilot(String pilot) {
    this.pilot = pilot;
  }

  public Vehicles films(List<String> films) {
    this.films = films;
    return this;
  }

  public Vehicles addFilmsItem(String filmsItem) {
    if (this.films == null) {
      this.films = new ArrayList<String>();
    }
    this.films.add(filmsItem);
    return this;
  }

   /**
   * Array of films the vehicle appears in
   * @return films
  **/
  @ApiModelProperty(value = "Array of films the vehicle appears in")
  public List<String> getFilms() {
    return films;
  }

  public void setFilms(List<String> films) {
    this.films = films;
  }

  public Vehicles url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Unique URL of the vehicle
   * @return url
  **/
  @ApiModelProperty(value = "Unique URL of the vehicle")
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vehicles vehicles = (Vehicles) o;
    return Objects.equals(this.id, vehicles.id) &&
        Objects.equals(this.name, vehicles.name) &&
        Objects.equals(this.description, vehicles.description) &&
        Objects.equals(this.vehicleClass, vehicles.vehicleClass) &&
        Objects.equals(this.length, vehicles.length) &&
        Objects.equals(this.pilot, vehicles.pilot) &&
        Objects.equals(this.films, vehicles.films) &&
        Objects.equals(this.url, vehicles.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, vehicleClass, length, pilot, films, url);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vehicles {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    vehicleClass: ").append(toIndentedString(vehicleClass)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    pilot: ").append(toIndentedString(pilot)).append("\n");
    sb.append("    films: ").append(toIndentedString(films)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

